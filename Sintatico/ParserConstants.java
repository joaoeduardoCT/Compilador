public interface ParserConstants
{
    int START_SYMBOL = 36;

    int FIRST_NON_TERMINAL    = 36;
    int FIRST_SEMANTIC_ACTION = 70;

    int[][] PARSER_TABLE =
    {
        { -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1,  1, -1, -1, -1, -1,  1,  1,  1,  1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1,  8, -1, -1, -1, -1,  5,  6,  7,  9, -1, -1,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 18, -1, -1, -1, -1, 16, 17, 17, 19, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 29, 29, -1, -1, -1, -1, -1, -1, 29, 29, 29, 29, -1, 29, -1, -1, -1, -1, 29, 29, -1, -1, -1, -1, -1, 29, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 43, 43, -1, -1, -1, -1, -1, -1, 43, 43, 43, 43, -1, 43, -1, -1, -1, -1, 43, 43, -1, -1, -1, -1, -1, 43, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 37, -1, -1, -1, -1, 37, 37, 37, 37, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 36, -1, 35, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 34, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 44, -1, -1, -1, -1, 44, 44, 44, 44, -1, -1, 44, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, 44, -1, -1, 44, 46 },
        { -1, -1, -1, -1, -1, -1, -1, 49, 48, -1, -1, -1, -1, -1, -1, 47, 47, 47, 47, -1, 50, -1, -1, -1, -1, 47, 47, -1, -1, -1, -1, -1, 47, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, 51, 51, 51, -1, -1, -1, -1, -1, -1, 51, 51, -1, -1, -1, -1, -1, 51, -1, -1 },
        { -1, -1, -1, -1, 53, -1, -1, -1, -1, 53, 53, 53, 53, -1, -1, 53, -1, -1, -1, 53, -1, 52, 52, 52, 52, -1, -1, -1, -1, 53, 53, -1, -1, 53, 53 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 55, 56, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 58, 58, 58, -1, -1, -1, -1, -1, -1, 58, 58, -1, -1, -1, -1, -1, 58, -1, -1 },
        { -1, -1, -1, -1, 59, -1, -1, -1, -1, 59, 59, 59, 59, -1, -1, 59, -1, -1, -1, 59, -1, 59, 59, 59, 59, 60, 61, -1, -1, 59, 59, -1, -1, 59, 59 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 62, 62, 62, -1, -1, -1, -1, -1, -1, 62, 62, -1, -1, -1, -1, -1, 62, -1, -1 },
        { -1, -1, -1, -1, 63, -1, -1, -1, -1, 63, 63, 63, 63, -1, -1, 63, -1, -1, -1, 63, -1, 63, 63, 63, 63, 63, 63, 64, 65, 63, 63, -1, -1, 63, 63 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 67, 68, 69, -1, -1, -1, -1, -1, -1, 71, 72, -1, -1, -1, -1, -1, 70, -1, -1 },
        { -1, -1, -1,  3,  2, -1, -1, -1, -1,  2,  2,  2,  2, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 14, 14, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, 24, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 10, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, 31, -1 },
        { -1, -1, -1, 39, 38, 39, 39, -1, -1, 38, 38, 38, 38, 39, 39, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        {  3, 37,  4 },
        { 38, 31, 63 },
        { 37 },
        {  0 },
        { 16, 64, 67 },
        { 10, 33, 48, 34 },
        { 11, 33, 46, 34 },
        { 12, 33, 46, 34 },
        {  5, 47, 49, 51, 52,  4 },
        { 13, 49, 66 },
        { 32, 47 },
        {  0 },
        { 16, 64 },
        { 30, 39 },
        {  0 },
        { 41 },
        { 42 },
        { 43 },
        { 44 },
        { 45 },
        { 39, 32, 47 },
        { 10, 33, 48, 34 },
        { 50, 16, 65 },
        { 30, 48 },
        {  0 },
        { 19, 30 },
        {  0 },
        { 11, 33, 46, 34 },
        { 12, 33, 46, 34 },
        { 47, 68 },
        { 30, 46 },
        {  0 },
        {  5, 47, 49, 51, 52,  4 },
        {  7, 49 },
        {  0 },
        {  6, 47, 49, 51 },
        {  0 },
        { 40, 31, 69 },
        { 49 },
        {  0 },
        { 13, 49, 66 },
        { 15, 47 },
        { 14, 47 },
        { 54, 53 },
        {  0 },
        { 20, 54, 53 },
        { 35, 54, 53 },
        { 55 },
        {  9 },
        {  8 },
        { 21, 54 },
        { 58, 56 },
        { 57, 58 },
        {  0 },
        { 22 },
        { 23 },
        { 24 },
        { 25 },
        { 60, 59 },
        {  0 },
        { 26, 60, 59 },
        { 27, 60, 59 },
        { 62, 61 },
        {  0 },
        { 28, 62, 61 },
        { 29, 62, 61 },
        { 16 },
        { 17 },
        { 18 },
        { 19 },
        { 33, 47, 34 },
        { 26, 62 },
        { 27, 62 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "esperado EOF",
        "esperado palavra reservada",
        "esperado main",
        "esperado end",
        "esperado if",
        "esperado elif",
        "esperado else",
        "esperado false",
        "esperado true",
        "esperado read",
        "esperado write",
        "esperado writeln",
        "esperado repeat",
        "esperado until",
        "esperado while",
        "esperado id",
        "esperado constante_int",
        "esperado constante_float",
        "esperado constante_String",
        "esperado &&",
        "esperado !",
        "esperado ==",
        "esperado !=",
        "esperado <",
        "esperado >",
        "esperado +",
        "esperado -",
        "esperado *",
        "esperado /",
        "esperado ,",
        "esperado ;",
        "esperado =",
        "esperado (",
        "esperado )",
        "esperado ||",
        "esperado main", //"<programa> inválido",
        "esperado identificador read write writeln if repeat", //"<lista_instrucao> inválido",
        "<instrucao> inválido",
        "<lista_identificadores> inválido",
        "<comando> inválido",
        "<atribuicao> inválido",
        "<entrada_dados> inválido",
        "<saida_dados> inválido",
        "<selecao> inválido",
        "<repeticao> inválido",
        "esperado expressão", //"<lista_expressao> inválido",
        "esperado expressão", //"<expressao> inválido",
        "<lista_entrada> inválido",
        "<lista_comandos> inválido",
        "<string> inválido",
        "<elif_pereira> inválido",
        "<else_dasilva> inválido",
        "<expressao1> inválido",
        "<elemento> inválido",
        "<relacional> inválido",
        "<relacional1> inválido",
        "<operador_relacional> inválido",
        "<aritmetica> inválido",
        "<aritmetica1> inválido",
        "<termo> inválido",
        "<termo1> inválido",
        "<fator> inválido",
        "<lista_instrucao1> inválido",
        "<lista_identificadores1> inválido",
        "<lista_entrada1> inválido",
        "<repeticao1> inválido",
        "<instrucao2> inválido",
        "<lista_expressao1> inválido",
        "<lista_comandos1> inválido"
    };
}
